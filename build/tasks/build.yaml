apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: ods-pipeline-gradle-build{{- if .PostgresSidecar }}-with-postgres{{- end}}
spec:
  description: |
    Builds Gradle applications and libraries.

    See https://github.com/opendevstack/ods-pipeline-gradle/blob/v{{.Version}}/docs/tasks/build.adoc
  params:
    - name: working-dir
      description: |
        Working directory. The path must be relative to the root of the repository,
        without leading `./` and trailing `/`.
      type: string
      default: "."
    - name: gradle-additional-tasks
      description: >-
        Additional gradle tasks to be passed to the gradle build. (default tasks called are `clean` and `build`).
      type: string
      default: ""
    - name: gradle-options
      description: >-
        Options to be passed to the gradle build.
        (See ref: https://docs.gradle.org/7.4.2/userguide/command_line_interface.html#sec:command_line_debugging)
      type: string
      default: "--no-daemon --stacktrace"
    - name: gradle-opts-env
      description: >-
        Will be exposed to the build via `GRADLE_OPTS` environment variable.
        Specifies JVM arguments to use when starting the Gradle client VM. The client VM only handles command line input/output, so it is rare that one would need to change its VM options.
        You can still use this to change the settings for the Gradle daemon which runs the actual build by setting the according Gradle properties by `-D`.
        If you want to set the JVM arguments for the actual build you would do this via `-Dorg.gradle.jvmargs=-Xmx1024M`
        (See ref: https://docs.gradle.org/7.4.2/userguide/build_environment.html#sec:gradle_configuration_properties).
      type: string
      default: "-Dorg.gradle.jvmargs=-Xmx512M"
    - name: output-dir
      description: >-
        Path to the directory into which the resulting Java application jar should be copied, relative to `working-dir`.
        This directory may then later be used as Docker context for example.
      type: string
      default: docker
    - name: cache-build
      description: >-
        If enabled tasks uses or populates cache with the output dir contents (and artifacts) so that
        a build can be skipped if the `working-dir` contents did not change.
        You must set this to `"false"` if the build can be affected by files outside `working-dir`. See ADR caching-build-tasks for more details and workarounds.
      type: string
      default: "true"
    - name: build-extra-inputs
      description: >-
        List of build source directories (as colon separated string) which in addition working-dir influence the build.
        These directories are relative to the repository root.
        If the contents in these directories change the cache is invalidated so that the build task will rebuild from scratch.
      type: string
      default: ""
    - name: cached-outputs
      description: >-
        List of build output directories (as colon separated string) to be cached.
        These directories are relative to `working-dir`.
      type: string
      default: "docker"
    - name: build-script
      description: >-
        Build script to execute. The
        link:https://github.com/opendevstack/ods-pipeline-gradle/blob/main/build/package/scripts/build.sh[default script]
        is located in the container image. If you specify a relative path
        instead, it will be resolved from the workspace. See the task definition
        for details how the build script is invoked.
      type: string
      default: "/usr/local/bin/build-gradle"
    - name: gradle-build-dir
      description: >-
        Path to the directory into which Gradle publishes its build.
      type: string
      default: build
    {{- if .PostgresSidecar }}
    - name: postgres-image
      description: >-
        Container image to use for the PostgreSQL sidecar.
      type: string
      default: 'postgres'
    - name: postgres-password
      description: >-
        Value to set for `POSTGRES_PASSWORD` (required).
        This sets the superuser password for PostgreSQL.
      type: string
    - name: postgres-user
      description: >-
        Value to set for `POSTGRES_USER`.
        This variable will create the specified user with superuser power
        and a database with the same name.
      type: string
      default: 'postgres'
    - name: postgres-db
      description: >-
        Value to set for `POSTGRES_DB`.
        Can be used to define a different name for the default database
        that is created when the image is first started.
      type: string
      default: 'postgres'
    {{- end }}
  results:
    - description: The cache location that the build task used. If caching is not enabled this will be an empty string.
      name: build-reused-from-location
  {{- if .PostgresSidecar }}
  sidecars:
    - image: $(params.postgres-image)
      name: postgres-sidecar
      env:
        - name: POSTGRES_PASSWORD
          value: $(params.postgres-password)
        - name: POSTGRES_USER
          value: $(params.postgres-user)
        - name: POSTGRES_DB
          value: $(params.postgres-db)
  {{- end }}
  steps:
    - name: build-gradle
      # Image is built from build/images/Dockerfile.gradle-toolset.
      image: '{{.ImageRepository}}/gradle-toolset:{{.Version}}'
      env:
        - name: DEBUG
          valueFrom:
            configMapKeyRef:
              key: debug
              name: ods-pipeline
        - name: HOME
          value: '/tekton/home'
        - name: CI
          value: "true"
        - name: GRADLE_OPTS
          value: "$(params.gradle-opts-env)"
        - name: NEXUS_URL
          valueFrom:
            configMapKeyRef:
              key: url
              name: ods-nexus
        - name: NEXUS_USERNAME
          valueFrom:
            secretKeyRef:
              key: username
              name: ods-nexus-auth
        - name: NEXUS_PASSWORD
          valueFrom:
            secretKeyRef:
              key: password
              name: ods-nexus-auth
        {{- if .PostgresSidecar }}
        - name: POSTGRES_PASSWORD
          value: $(params.postgres-password)
        - name: POSTGRES_USER
          value: $(params.postgres-user)
        - name: POSTGRES_DB
          value: $(params.postgres-db)
        {{- end }}
      resources:
        {}
      script: |
        echo -n "" > $(results.build-reused-from-location.path)
        cache_build_key=gradle
        if copy-build-if-cached \
          --cache-build-key="$cache_build_key" \
          --build-extra-inputs=$(params.build-extra-inputs) \
          --cached-outputs=$(params.cached-outputs) \
          --cache-location-used-path=$(results.build-reused-from-location.path) \
          --working-dir=$(params.working-dir) \
          --debug=${DEBUG} ; then
          exit 0
        fi
        # Default build script is build/package/scripts/build-gradle.sh.
        set +e
        $(params.build-script) \
          --working-dir=$(params.working-dir) \
          --output-dir=$(params.output-dir) \
          --gradle-build-dir=$(params.gradle-build-dir) \
          --gradle-additional-tasks="$(params.gradle-additional-tasks)" \
          --gradle-options="$(params.gradle-options)"
        build_exit=$?
        set -e
        copy-artifacts --debug=${DEBUG}
        if [ $build_exit -ne 0 ]; then
          exit $build_exit
        fi
        cache-build \
          --cache-build=$(params.cache-build) \
          --cache-build-key="$cache_build_key" \
          --build-extra-inputs=$(params.build-extra-inputs) \
          --cached-outputs=$(params.cached-outputs) \
          --cache-location-used-path=$(results.build-reused-from-location.path) \
          --working-dir=$(params.working-dir) \
          --debug=${DEBUG}
      volumeMounts:
        - mountPath: /etc/ssl/certs/private-cert.pem
          name: private-cert
          readOnly: true
          subPath: tls.crt
      workingDir: $(workspaces.source.path)
  volumes:
    - name: private-cert
      secret:
        secretName: ods-private-cert
        optional: true
  workspaces:
    - name: source
